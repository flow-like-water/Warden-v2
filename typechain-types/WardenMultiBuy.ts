/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WardenMultiBuyInterface extends utils.Interface {
  functions: {
    "MAX_PCT()": FunctionFragment;
    "UNIT()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "delegationBoost()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "getSortedOffers()": FunctionFragment;
    "owner()": FunctionFragment;
    "preSortedMultiBuy(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256[])": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "simpleMultiBuy(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "sortingMultiBuy(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "votingEscrow()": FunctionFragment;
    "warden()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_PCT"
      | "UNIT"
      | "WEEK"
      | "delegationBoost"
      | "feeToken"
      | "getSortedOffers"
      | "owner"
      | "preSortedMultiBuy"
      | "recoverERC20"
      | "renounceOwnership"
      | "simpleMultiBuy"
      | "sortingMultiBuy"
      | "transferOwnership"
      | "votingEscrow"
      | "warden"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_PCT", values?: undefined): string;
  encodeFunctionData(functionFragment: "UNIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegationBoost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSortedOffers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preSortedMultiBuy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "simpleMultiBuy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sortingMultiBuy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "warden", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_PCT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UNIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSortedOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preSortedMultiBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleMultiBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortingMultiBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warden", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WardenMultiBuy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WardenMultiBuyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PCT(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegationBoost(overrides?: CallOverrides): Promise<[string]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    getSortedOffers(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    preSortedMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      sortedOfferIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simpleMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sortingMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;

    warden(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  delegationBoost(overrides?: CallOverrides): Promise<string>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  getSortedOffers(overrides?: CallOverrides): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  preSortedMultiBuy(
    receiver: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    boostAmount: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    minRequiredAmount: PromiseOrValue<BigNumberish>,
    totalFeesAmount: PromiseOrValue<BigNumberish>,
    acceptableSlippage: PromiseOrValue<BigNumberish>,
    sortedOfferIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverERC20(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simpleMultiBuy(
    receiver: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    boostAmount: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    minRequiredAmount: PromiseOrValue<BigNumberish>,
    totalFeesAmount: PromiseOrValue<BigNumberish>,
    acceptableSlippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sortingMultiBuy(
    receiver: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    boostAmount: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    minRequiredAmount: PromiseOrValue<BigNumberish>,
    totalFeesAmount: PromiseOrValue<BigNumberish>,
    acceptableSlippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  warden(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    delegationBoost(overrides?: CallOverrides): Promise<string>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    getSortedOffers(overrides?: CallOverrides): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    preSortedMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      sortedOfferIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoverERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    simpleMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sortingMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;

    warden(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    delegationBoost(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    getSortedOffers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    preSortedMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      sortedOfferIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simpleMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sortingMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    warden(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PCT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegationBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSortedOffers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preSortedMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      sortedOfferIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simpleMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sortingMultiBuy(
      receiver: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      boostAmount: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      minRequiredAmount: PromiseOrValue<BigNumberish>,
      totalFeesAmount: PromiseOrValue<BigNumberish>,
      acceptableSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    warden(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
