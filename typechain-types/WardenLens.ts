/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace WardenLens {
  export type PricesStruct = {
    highest: PromiseOrValue<BigNumberish>;
    lowest: PromiseOrValue<BigNumberish>;
    median: PromiseOrValue<BigNumberish>;
  };

  export type PricesStructOutput = [BigNumber, BigNumber, BigNumber] & {
    highest: BigNumber;
    lowest: BigNumber;
    median: BigNumber;
  };
}

export interface WardenLensInterface extends utils.Interface {
  functions: {
    "MAX_PCT()": FunctionFragment;
    "MAX_UINT()": FunctionFragment;
    "UNIT()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "delegationBoost()": FunctionFragment;
    "getPrices()": FunctionFragment;
    "getUserClaimableBoosts(address)": FunctionFragment;
    "votingEscrow()": FunctionFragment;
    "warden()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_PCT"
      | "MAX_UINT"
      | "UNIT"
      | "WEEK"
      | "delegationBoost"
      | "getPrices"
      | "getUserClaimableBoosts"
      | "votingEscrow"
      | "warden"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_PCT", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_UINT", values?: undefined): string;
  encodeFunctionData(functionFragment: "UNIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegationBoost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserClaimableBoosts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "warden", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_PCT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_UINT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UNIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimableBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warden", data: BytesLike): Result;

  events: {};
}

export interface WardenLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WardenLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PCT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_UINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegationBoost(overrides?: CallOverrides): Promise<[string]>;

    getPrices(
      overrides?: CallOverrides
    ): Promise<
      [WardenLens.PricesStructOutput] & {
        prices: WardenLens.PricesStructOutput;
      }
    >;

    getUserClaimableBoosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;

    warden(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  delegationBoost(overrides?: CallOverrides): Promise<string>;

  getPrices(overrides?: CallOverrides): Promise<WardenLens.PricesStructOutput>;

  getUserClaimableBoosts(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  warden(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    delegationBoost(overrides?: CallOverrides): Promise<string>;

    getPrices(
      overrides?: CallOverrides
    ): Promise<WardenLens.PricesStructOutput>;

    getUserClaimableBoosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;

    warden(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    delegationBoost(overrides?: CallOverrides): Promise<BigNumber>;

    getPrices(overrides?: CallOverrides): Promise<BigNumber>;

    getUserClaimableBoosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    warden(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PCT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_UINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegationBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserClaimableBoosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    warden(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
