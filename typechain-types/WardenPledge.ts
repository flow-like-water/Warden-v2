/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace WardenPledge {
  export type PledgeStruct = {
    targetVotes: PromiseOrValue<BigNumberish>;
    rewardPerVotePerWeek: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    rewardToken: PromiseOrValue<string>;
    endTimestamp: PromiseOrValue<BigNumberish>;
    closed: PromiseOrValue<boolean>;
  };

  export type PledgeStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    targetVotes: BigNumber;
    rewardPerVotePerWeek: BigNumber;
    receiver: string;
    rewardToken: string;
    endTimestamp: BigNumber;
    closed: boolean;
  };
}

export interface WardenPledgeInterface extends utils.Interface {
  functions: {
    "MAX_PCT()": FunctionFragment;
    "MIN_DELEGATION_DURATION()": FunctionFragment;
    "MIN_PLEDGE_DURATION()": FunctionFragment;
    "UNIT()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addMultipleRewardToken(address[],uint256[])": FunctionFragment;
    "addRewardToken(address,uint256)": FunctionFragment;
    "chestAddress()": FunctionFragment;
    "closePledge(uint256,address)": FunctionFragment;
    "createPledge(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "delegationBoost()": FunctionFragment;
    "extendPledge(uint256,uint256,uint256)": FunctionFragment;
    "getAllPledges()": FunctionFragment;
    "getUserPledges(address)": FunctionFragment;
    "increasePledgeRewardPerVote(uint256,uint256,uint256)": FunctionFragment;
    "minAmountRewardToken(address)": FunctionFragment;
    "minVoteDiff()": FunctionFragment;
    "nextPledgeIndex()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerPledges(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pledge(uint256,uint256,uint256)": FunctionFragment;
    "pledgeAvailableRewardAmounts(uint256)": FunctionFragment;
    "pledgeOwner(uint256)": FunctionFragment;
    "pledgePercent(uint256,uint256,uint256)": FunctionFragment;
    "pledges(uint256)": FunctionFragment;
    "protocolFeeRatio()": FunctionFragment;
    "recoverERC20(address)": FunctionFragment;
    "removeRewardToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardTokenTotalAmount(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateChest(address)": FunctionFragment;
    "updateMinVoteDiff(uint256)": FunctionFragment;
    "updatePlatformFee(uint256)": FunctionFragment;
    "updateRewardToken(address,uint256)": FunctionFragment;
    "votingEscrow()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_PCT"
      | "MIN_DELEGATION_DURATION"
      | "MIN_PLEDGE_DURATION"
      | "UNIT"
      | "WEEK"
      | "acceptOwnership"
      | "addMultipleRewardToken"
      | "addRewardToken"
      | "chestAddress"
      | "closePledge"
      | "createPledge"
      | "delegationBoost"
      | "extendPledge"
      | "getAllPledges"
      | "getUserPledges"
      | "increasePledgeRewardPerVote"
      | "minAmountRewardToken"
      | "minVoteDiff"
      | "nextPledgeIndex"
      | "owner"
      | "ownerPledges"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "pledge"
      | "pledgeAvailableRewardAmounts"
      | "pledgeOwner"
      | "pledgePercent"
      | "pledges"
      | "protocolFeeRatio"
      | "recoverERC20"
      | "removeRewardToken"
      | "renounceOwnership"
      | "rewardTokenTotalAmount"
      | "transferOwnership"
      | "unpause"
      | "updateChest"
      | "updateMinVoteDiff"
      | "updatePlatformFee"
      | "updateRewardToken"
      | "votingEscrow"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_PCT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_DELEGATION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PLEDGE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UNIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMultipleRewardToken",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chestAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePledge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPledge",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendPledge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPledges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPledges",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePledgeRewardPerVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minVoteDiff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPledgeIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerPledges",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pledge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeAvailableRewardAmounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgePercent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pledges",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenTotalAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateChest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinVoteDiff",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrow",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_PCT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DELEGATION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PLEDGE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMultipleRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chestAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePledge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPledge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendPledge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPledges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPledges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePledgeRewardPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVoteDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextPledgeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerPledges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgeAvailableRewardAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pledges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateChest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinVoteDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrow",
    data: BytesLike
  ): Result;

  events: {
    "ChestUpdated(address,address)": EventFragment;
    "ClosePledge(uint256)": EventFragment;
    "ExtendPledgeDuration(uint256,uint256,uint256)": EventFragment;
    "IncreasePledgeRewardPerVote(uint256,uint256,uint256)": EventFragment;
    "MinVoteDiffUpdated(uint256,uint256)": EventFragment;
    "NewPendingOwner(address,address)": EventFragment;
    "NewPledge(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "NewRewardToken(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PlatformFeeUpdated(uint256,uint256)": EventFragment;
    "Pledged(uint256,address,uint256,uint256)": EventFragment;
    "RemoveRewardToken(address)": EventFragment;
    "RetrievedPledgeRewards(uint256,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateRewardToken(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChestUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePledge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtendPledgeDuration"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreasePledgeRewardPerVote"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinVoteDiffUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPledge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pledged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RetrievedPledgeRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardToken"): EventFragment;
}

export interface ChestUpdatedEventObject {
  oldChest: string;
  newChest: string;
}
export type ChestUpdatedEvent = TypedEvent<
  [string, string],
  ChestUpdatedEventObject
>;

export type ChestUpdatedEventFilter = TypedEventFilter<ChestUpdatedEvent>;

export interface ClosePledgeEventObject {
  pledgeId: BigNumber;
}
export type ClosePledgeEvent = TypedEvent<[BigNumber], ClosePledgeEventObject>;

export type ClosePledgeEventFilter = TypedEventFilter<ClosePledgeEvent>;

export interface ExtendPledgeDurationEventObject {
  pledgeId: BigNumber;
  oldEndTimestamp: BigNumber;
  newEndTimestamp: BigNumber;
}
export type ExtendPledgeDurationEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ExtendPledgeDurationEventObject
>;

export type ExtendPledgeDurationEventFilter =
  TypedEventFilter<ExtendPledgeDurationEvent>;

export interface IncreasePledgeRewardPerVoteEventObject {
  pledgeId: BigNumber;
  oldrewardPerVotePerWeek: BigNumber;
  newrewardPerVotePerWeek: BigNumber;
}
export type IncreasePledgeRewardPerVoteEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  IncreasePledgeRewardPerVoteEventObject
>;

export type IncreasePledgeRewardPerVoteEventFilter =
  TypedEventFilter<IncreasePledgeRewardPerVoteEvent>;

export interface MinVoteDiffUpdatedEventObject {
  oldMinVoteDiff: BigNumber;
  newMinVoteDiff: BigNumber;
}
export type MinVoteDiffUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinVoteDiffUpdatedEventObject
>;

export type MinVoteDiffUpdatedEventFilter =
  TypedEventFilter<MinVoteDiffUpdatedEvent>;

export interface NewPendingOwnerEventObject {
  previousPendingOwner: string;
  newPendingOwner: string;
}
export type NewPendingOwnerEvent = TypedEvent<
  [string, string],
  NewPendingOwnerEventObject
>;

export type NewPendingOwnerEventFilter = TypedEventFilter<NewPendingOwnerEvent>;

export interface NewPledgeEventObject {
  creator: string;
  receiver: string;
  rewardToken: string;
  id: BigNumber;
  targetVotes: BigNumber;
  rewardPerVotePerWeek: BigNumber;
  endTimestamp: BigNumber;
}
export type NewPledgeEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  NewPledgeEventObject
>;

export type NewPledgeEventFilter = TypedEventFilter<NewPledgeEvent>;

export interface NewRewardTokenEventObject {
  token: string;
  minRewardPerWeek: BigNumber;
}
export type NewRewardTokenEvent = TypedEvent<
  [string, BigNumber],
  NewRewardTokenEventObject
>;

export type NewRewardTokenEventFilter = TypedEventFilter<NewRewardTokenEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PlatformFeeUpdatedEventObject {
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type PlatformFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PlatformFeeUpdatedEventObject
>;

export type PlatformFeeUpdatedEventFilter =
  TypedEventFilter<PlatformFeeUpdatedEvent>;

export interface PledgedEventObject {
  pledgeId: BigNumber;
  user: string;
  amount: BigNumber;
  endTimestamp: BigNumber;
}
export type PledgedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  PledgedEventObject
>;

export type PledgedEventFilter = TypedEventFilter<PledgedEvent>;

export interface RemoveRewardTokenEventObject {
  token: string;
}
export type RemoveRewardTokenEvent = TypedEvent<
  [string],
  RemoveRewardTokenEventObject
>;

export type RemoveRewardTokenEventFilter =
  TypedEventFilter<RemoveRewardTokenEvent>;

export interface RetrievedPledgeRewardsEventObject {
  pledgeId: BigNumber;
  receiver: string;
  amount: BigNumber;
}
export type RetrievedPledgeRewardsEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RetrievedPledgeRewardsEventObject
>;

export type RetrievedPledgeRewardsEventFilter =
  TypedEventFilter<RetrievedPledgeRewardsEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdateRewardTokenEventObject {
  token: string;
  minRewardPerWeek: BigNumber;
}
export type UpdateRewardTokenEvent = TypedEvent<
  [string, BigNumber],
  UpdateRewardTokenEventObject
>;

export type UpdateRewardTokenEventFilter =
  TypedEventFilter<UpdateRewardTokenEvent>;

export interface WardenPledge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WardenPledgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PCT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DELEGATION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_PLEDGE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMultipleRewardToken(
      tokens: PromiseOrValue<string>[],
      minRewardsPerWeek: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRewardToken(
      token: PromiseOrValue<string>,
      minRewardPerWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chestAddress(overrides?: CallOverrides): Promise<[string]>;

    closePledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPledge(
      receiver: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      targetVotes: PromiseOrValue<BigNumberish>,
      rewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegationBoost(overrides?: CallOverrides): Promise<[string]>;

    extendPledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      newEndTimestamp: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllPledges(
      overrides?: CallOverrides
    ): Promise<[WardenPledge.PledgeStructOutput[]]>;

    getUserPledges(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    increasePledgeRewardPerVote(
      pledgeId: PromiseOrValue<BigNumberish>,
      newRewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minAmountRewardToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minVoteDiff(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextPledgeIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerPledges(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pledgeAvailableRewardAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pledgeOwner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pledgePercent(
      pledgeId: PromiseOrValue<BigNumberish>,
      percent: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pledges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, boolean] & {
        targetVotes: BigNumber;
        rewardPerVotePerWeek: BigNumber;
        receiver: string;
        rewardToken: string;
        endTimestamp: BigNumber;
        closed: boolean;
      }
    >;

    protocolFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverERC20(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRewardToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardTokenTotalAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateChest(
      chest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMinVoteDiff(
      newMinVoteDiff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardToken(
      token: PromiseOrValue<string>,
      minRewardPerWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DELEGATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_PLEDGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMultipleRewardToken(
    tokens: PromiseOrValue<string>[],
    minRewardsPerWeek: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRewardToken(
    token: PromiseOrValue<string>,
    minRewardPerWeek: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chestAddress(overrides?: CallOverrides): Promise<string>;

  closePledge(
    pledgeId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPledge(
    receiver: PromiseOrValue<string>,
    rewardToken: PromiseOrValue<string>,
    targetVotes: PromiseOrValue<BigNumberish>,
    rewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
    endTimestamp: PromiseOrValue<BigNumberish>,
    maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegationBoost(overrides?: CallOverrides): Promise<string>;

  extendPledge(
    pledgeId: PromiseOrValue<BigNumberish>,
    newEndTimestamp: PromiseOrValue<BigNumberish>,
    maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllPledges(
    overrides?: CallOverrides
  ): Promise<WardenPledge.PledgeStructOutput[]>;

  getUserPledges(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  increasePledgeRewardPerVote(
    pledgeId: PromiseOrValue<BigNumberish>,
    newRewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
    maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minAmountRewardToken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minVoteDiff(overrides?: CallOverrides): Promise<BigNumber>;

  nextPledgeIndex(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerPledges(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pledge(
    pledgeId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    endTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pledgeAvailableRewardAmounts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pledgeOwner(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pledgePercent(
    pledgeId: PromiseOrValue<BigNumberish>,
    percent: PromiseOrValue<BigNumberish>,
    endTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pledges(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, boolean] & {
      targetVotes: BigNumber;
      rewardPerVotePerWeek: BigNumber;
      receiver: string;
      rewardToken: string;
      endTimestamp: BigNumber;
      closed: boolean;
    }
  >;

  protocolFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  recoverERC20(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRewardToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardTokenTotalAmount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateChest(
    chest: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMinVoteDiff(
    newMinVoteDiff: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlatformFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardToken(
    token: PromiseOrValue<string>,
    minRewardPerWeek: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DELEGATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PLEDGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addMultipleRewardToken(
      tokens: PromiseOrValue<string>[],
      minRewardsPerWeek: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardToken(
      token: PromiseOrValue<string>,
      minRewardPerWeek: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    chestAddress(overrides?: CallOverrides): Promise<string>;

    closePledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPledge(
      receiver: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      targetVotes: PromiseOrValue<BigNumberish>,
      rewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegationBoost(overrides?: CallOverrides): Promise<string>;

    extendPledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      newEndTimestamp: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllPledges(
      overrides?: CallOverrides
    ): Promise<WardenPledge.PledgeStructOutput[]>;

    getUserPledges(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    increasePledgeRewardPerVote(
      pledgeId: PromiseOrValue<BigNumberish>,
      newRewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    minAmountRewardToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minVoteDiff(overrides?: CallOverrides): Promise<BigNumber>;

    nextPledgeIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerPledges(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pledgeAvailableRewardAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pledgeOwner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pledgePercent(
      pledgeId: PromiseOrValue<BigNumberish>,
      percent: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pledges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, boolean] & {
        targetVotes: BigNumber;
        rewardPerVotePerWeek: BigNumber;
        receiver: string;
        rewardToken: string;
        endTimestamp: BigNumber;
        closed: boolean;
      }
    >;

    protocolFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeRewardToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokenTotalAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateChest(
      chest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinVoteDiff(
      newMinVoteDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardToken(
      token: PromiseOrValue<string>,
      minRewardPerWeek: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ChestUpdated(address,address)"(
      oldChest?: null,
      newChest?: null
    ): ChestUpdatedEventFilter;
    ChestUpdated(oldChest?: null, newChest?: null): ChestUpdatedEventFilter;

    "ClosePledge(uint256)"(
      pledgeId?: PromiseOrValue<BigNumberish> | null
    ): ClosePledgeEventFilter;
    ClosePledge(
      pledgeId?: PromiseOrValue<BigNumberish> | null
    ): ClosePledgeEventFilter;

    "ExtendPledgeDuration(uint256,uint256,uint256)"(
      pledgeId?: PromiseOrValue<BigNumberish> | null,
      oldEndTimestamp?: null,
      newEndTimestamp?: null
    ): ExtendPledgeDurationEventFilter;
    ExtendPledgeDuration(
      pledgeId?: PromiseOrValue<BigNumberish> | null,
      oldEndTimestamp?: null,
      newEndTimestamp?: null
    ): ExtendPledgeDurationEventFilter;

    "IncreasePledgeRewardPerVote(uint256,uint256,uint256)"(
      pledgeId?: PromiseOrValue<BigNumberish> | null,
      oldrewardPerVotePerWeek?: null,
      newrewardPerVotePerWeek?: null
    ): IncreasePledgeRewardPerVoteEventFilter;
    IncreasePledgeRewardPerVote(
      pledgeId?: PromiseOrValue<BigNumberish> | null,
      oldrewardPerVotePerWeek?: null,
      newrewardPerVotePerWeek?: null
    ): IncreasePledgeRewardPerVoteEventFilter;

    "MinVoteDiffUpdated(uint256,uint256)"(
      oldMinVoteDiff?: null,
      newMinVoteDiff?: null
    ): MinVoteDiffUpdatedEventFilter;
    MinVoteDiffUpdated(
      oldMinVoteDiff?: null,
      newMinVoteDiff?: null
    ): MinVoteDiffUpdatedEventFilter;

    "NewPendingOwner(address,address)"(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;
    NewPendingOwner(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;

    "NewPledge(address,address,address,uint256,uint256,uint256,uint256)"(
      creator?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      id?: null,
      targetVotes?: null,
      rewardPerVotePerWeek?: null,
      endTimestamp?: null
    ): NewPledgeEventFilter;
    NewPledge(
      creator?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      id?: null,
      targetVotes?: null,
      rewardPerVotePerWeek?: null,
      endTimestamp?: null
    ): NewPledgeEventFilter;

    "NewRewardToken(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      minRewardPerWeek?: null
    ): NewRewardTokenEventFilter;
    NewRewardToken(
      token?: PromiseOrValue<string> | null,
      minRewardPerWeek?: null
    ): NewRewardTokenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PlatformFeeUpdated(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): PlatformFeeUpdatedEventFilter;
    PlatformFeeUpdated(
      oldFee?: null,
      newFee?: null
    ): PlatformFeeUpdatedEventFilter;

    "Pledged(uint256,address,uint256,uint256)"(
      pledgeId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      endTimestamp?: null
    ): PledgedEventFilter;
    Pledged(
      pledgeId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      endTimestamp?: null
    ): PledgedEventFilter;

    "RemoveRewardToken(address)"(
      token?: PromiseOrValue<string> | null
    ): RemoveRewardTokenEventFilter;
    RemoveRewardToken(
      token?: PromiseOrValue<string> | null
    ): RemoveRewardTokenEventFilter;

    "RetrievedPledgeRewards(uint256,address,uint256)"(
      pledgeId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      amount?: null
    ): RetrievedPledgeRewardsEventFilter;
    RetrievedPledgeRewards(
      pledgeId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      amount?: null
    ): RetrievedPledgeRewardsEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UpdateRewardToken(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      minRewardPerWeek?: null
    ): UpdateRewardTokenEventFilter;
    UpdateRewardToken(
      token?: PromiseOrValue<string> | null,
      minRewardPerWeek?: null
    ): UpdateRewardTokenEventFilter;
  };

  estimateGas: {
    MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DELEGATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PLEDGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMultipleRewardToken(
      tokens: PromiseOrValue<string>[],
      minRewardsPerWeek: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRewardToken(
      token: PromiseOrValue<string>,
      minRewardPerWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chestAddress(overrides?: CallOverrides): Promise<BigNumber>;

    closePledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPledge(
      receiver: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      targetVotes: PromiseOrValue<BigNumberish>,
      rewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegationBoost(overrides?: CallOverrides): Promise<BigNumber>;

    extendPledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      newEndTimestamp: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllPledges(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPledges(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePledgeRewardPerVote(
      pledgeId: PromiseOrValue<BigNumberish>,
      newRewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minAmountRewardToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minVoteDiff(overrides?: CallOverrides): Promise<BigNumber>;

    nextPledgeIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerPledges(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pledgeAvailableRewardAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pledgeOwner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pledgePercent(
      pledgeId: PromiseOrValue<BigNumberish>,
      percent: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pledges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRewardToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardTokenTotalAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateChest(
      chest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMinVoteDiff(
      newMinVoteDiff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardToken(
      token: PromiseOrValue<string>,
      minRewardPerWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PCT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DELEGATION_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_PLEDGE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMultipleRewardToken(
      tokens: PromiseOrValue<string>[],
      minRewardsPerWeek: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRewardToken(
      token: PromiseOrValue<string>,
      minRewardPerWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chestAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPledge(
      receiver: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      targetVotes: PromiseOrValue<BigNumberish>,
      rewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegationBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extendPledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      newEndTimestamp: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllPledges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserPledges(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePledgeRewardPerVote(
      pledgeId: PromiseOrValue<BigNumberish>,
      newRewardPerVotePerWeek: PromiseOrValue<BigNumberish>,
      maxTotalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minAmountRewardToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVoteDiff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPledgeIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerPledges(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pledge(
      pledgeId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pledgeAvailableRewardAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pledgeOwner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pledgePercent(
      pledgeId: PromiseOrValue<BigNumberish>,
      percent: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pledges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRewardToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokenTotalAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateChest(
      chest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMinVoteDiff(
      newMinVoteDiff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardToken(
      token: PromiseOrValue<string>,
      minRewardPerWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
