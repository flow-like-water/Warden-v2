/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Errors, ErrorsInterface } from "../../utils/Errors";

const _abi = [
  {
    inputs: [],
    name: "AlreadyAllowedToken",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyClaimed",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "AmountTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseDropTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "BoostRewardsNull",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotManager",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotCancelBoost",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotClaim",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotDelegate",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotMatchOrder",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotRecoverToken",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotWithdrawFeeToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimBlocked",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimNotBlocked",
    type: "error",
  },
  {
    inputs: [],
    name: "DurationOverOfferMaxDuration",
    type: "error",
  },
  {
    inputs: [],
    name: "DurationTooShort",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyBoost",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpiredPledge",
    type: "error",
  },
  {
    inputs: [],
    name: "FailBoostPurchase",
    type: "error",
  },
  {
    inputs: [],
    name: "FailDelegationBoost",
    type: "error",
  },
  {
    inputs: [],
    name: "FailRewardUpdate",
    type: "error",
  },
  {
    inputs: [],
    name: "FeesTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectExpiry",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectMaxFeeAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectMaxTotalRewardAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientCash",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientRewardCash",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidBoostId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidBoostOffer",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEndTimestamp",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPledgeID",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidValue",
    type: "error",
  },
  {
    inputs: [],
    name: "LockEndTooShort",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxPercTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "MinDropTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "MinPercOverMaxPerc",
    type: "error",
  },
  {
    inputs: [],
    name: "MinPercTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "NoRewards",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAllowedToken",
    type: "error",
  },
  {
    inputs: [],
    name: "NotBoostBuyer",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughFees",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOfferOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPledgeCreator",
    type: "error",
  },
  {
    inputs: [],
    name: "NotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "NullAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NullClaimAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NullEndTimestamp",
    type: "error",
  },
  {
    inputs: [],
    name: "NullFees",
    type: "error",
  },
  {
    inputs: [],
    name: "NullMaxDuration",
    type: "error",
  },
  {
    inputs: [],
    name: "NullPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "NullValue",
    type: "error",
  },
  {
    inputs: [],
    name: "NumberExceed64Bits",
    type: "error",
  },
  {
    inputs: [],
    name: "OfferExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "PercentOutOfferBonds",
    type: "error",
  },
  {
    inputs: [],
    name: "PercentOverMax",
    type: "error",
  },
  {
    inputs: [],
    name: "PercentUnderMinRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "PledgeAlreadyClosed",
    type: "error",
  },
  {
    inputs: [],
    name: "PledgeClosed",
    type: "error",
  },
  {
    inputs: [],
    name: "PledgeNotExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "ReserveTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardPerVoteTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardsAlreadyStarted",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardsBalanceTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardsNotStarted",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardsNotUpdated",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardsPerVotesTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetVoteUnderMin",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetVotesOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetVotesTooLoow",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "UnequalArraySizes",
    type: "error",
  },
  {
    inputs: [],
    name: "WardenNotOperator",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220decd200013e04e53f39e0c1231db8c033c5430c2c011547aa1aa1d77f88275b564736f6c634300080a0033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
