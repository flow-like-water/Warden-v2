/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Warden {
  export type PurchasedBoostStruct = {
    amount: PromiseOrValue<BigNumberish>;
    startIndex: PromiseOrValue<BigNumberish>;
    startTimestamp: PromiseOrValue<BigNumberish>;
    endTimestamp: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    claimed: PromiseOrValue<boolean>;
  };

  export type PurchasedBoostStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    amount: BigNumber;
    startIndex: BigNumber;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    buyer: string;
    claimed: boolean;
  };
}

export interface WardenInterface extends utils.Interface {
  functions: {
    "MAX_PCT()": FunctionFragment;
    "MAX_UINT()": FunctionFragment;
    "UNIT()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "advisedPrice()": FunctionFragment;
    "approveManager(address)": FunctionFragment;
    "approvedManagers(address)": FunctionFragment;
    "baseWeeklyDropPerVote()": FunctionFragment;
    "blockClaim()": FunctionFragment;
    "buyDelegationBoost(address,address,uint256,uint256,uint256)": FunctionFragment;
    "buyDelegationBoostPercent(address,address,uint256,uint256,uint256)": FunctionFragment;
    "canDelegate(address,uint256)": FunctionFragment;
    "canDelegatePercent(address,uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "claimBoostReward(uint256)": FunctionFragment;
    "claimMultipleBoostReward(uint256[])": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "delegationBoost()": FunctionFragment;
    "depositToReserve(address,uint256)": FunctionFragment;
    "earnedFees(address)": FunctionFragment;
    "estimateFees(address,uint256,uint256)": FunctionFragment;
    "estimateFeesPercent(address,uint256,uint256)": FunctionFragment;
    "extraPaidPast()": FunctionFragment;
    "feeReserveRatio()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "getBoostReward(uint256)": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "getPurchasedBoost(uint256)": FunctionFragment;
    "getUserPurchasedBoosts(address)": FunctionFragment;
    "minDelegationTime()": FunctionFragment;
    "minPercRequired()": FunctionFragment;
    "minWeeklyDropPerVote()": FunctionFragment;
    "nextBoostId()": FunctionFragment;
    "nextUpdatePeriod()": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "offersIndex()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "periodDropPerVote(uint256)": FunctionFragment;
    "periodEndPurchasedDecrease(uint256)": FunctionFragment;
    "periodPurchasedAmount(uint256)": FunctionFragment;
    "periodPurchasedDecreaseChanges(uint256)": FunctionFragment;
    "periodRewardIndex(uint256)": FunctionFragment;
    "purchasedBoosts(uint256)": FunctionFragment;
    "quit()": FunctionFragment;
    "register(uint256,uint64,uint64,uint16,uint16,bool)": FunctionFragment;
    "remainingRewardPastPeriod()": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveAmount()": FunctionFragment;
    "reserveManager()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setAdvisedPrice(uint256)": FunctionFragment;
    "setBaseWeeklyDropPerVote(uint256)": FunctionFragment;
    "setDelegationBoost(address)": FunctionFragment;
    "setFeeReserveRatio(uint256)": FunctionFragment;
    "setMinDelegationTime(uint256)": FunctionFragment;
    "setMinPercRequired(uint256)": FunctionFragment;
    "setMinWeeklyDropPerVote(uint256)": FunctionFragment;
    "setReserveManager(address)": FunctionFragment;
    "setTargetPurchaseAmount(uint256)": FunctionFragment;
    "startRewardDistribution(address,uint256,uint256,uint256)": FunctionFragment;
    "targetPurchaseAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unblockClaim()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateOffer(uint256,uint64,uint64,uint16,uint16,bool)": FunctionFragment;
    "updateOfferPrice(uint256,bool)": FunctionFragment;
    "updateRewardState()": FunctionFragment;
    "userIndex(address)": FunctionFragment;
    "userPurchasedBoosts(address,uint256)": FunctionFragment;
    "votingEscrow()": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawFromReserve(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_PCT"
      | "MAX_UINT"
      | "UNIT"
      | "WEEK"
      | "advisedPrice"
      | "approveManager"
      | "approvedManagers"
      | "baseWeeklyDropPerVote"
      | "blockClaim"
      | "buyDelegationBoost"
      | "buyDelegationBoostPercent"
      | "canDelegate"
      | "canDelegatePercent"
      | "claim"
      | "claimBoostReward"
      | "claimMultipleBoostReward"
      | "claimable"
      | "currentPeriod"
      | "delegationBoost"
      | "depositToReserve"
      | "earnedFees"
      | "estimateFees"
      | "estimateFeesPercent"
      | "extraPaidPast"
      | "feeReserveRatio"
      | "feeToken"
      | "getBoostReward"
      | "getOffer"
      | "getPurchasedBoost"
      | "getUserPurchasedBoosts"
      | "minDelegationTime"
      | "minPercRequired"
      | "minWeeklyDropPerVote"
      | "nextBoostId"
      | "nextUpdatePeriod"
      | "offers"
      | "offersIndex"
      | "owner"
      | "pause"
      | "paused"
      | "periodDropPerVote"
      | "periodEndPurchasedDecrease"
      | "periodPurchasedAmount"
      | "periodPurchasedDecreaseChanges"
      | "periodRewardIndex"
      | "purchasedBoosts"
      | "quit"
      | "register"
      | "remainingRewardPastPeriod"
      | "removeManager"
      | "renounceOwnership"
      | "reserveAmount"
      | "reserveManager"
      | "rewardToken"
      | "setAdvisedPrice"
      | "setBaseWeeklyDropPerVote"
      | "setDelegationBoost"
      | "setFeeReserveRatio"
      | "setMinDelegationTime"
      | "setMinPercRequired"
      | "setMinWeeklyDropPerVote"
      | "setReserveManager"
      | "setTargetPurchaseAmount"
      | "startRewardDistribution"
      | "targetPurchaseAmount"
      | "transferOwnership"
      | "unblockClaim"
      | "unpause"
      | "updateOffer"
      | "updateOfferPrice"
      | "updateRewardState"
      | "userIndex"
      | "userPurchasedBoosts"
      | "votingEscrow"
      | "withdrawERC20"
      | "withdrawFromReserve"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_PCT", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_UINT", values?: undefined): string;
  encodeFunctionData(functionFragment: "UNIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "advisedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedManagers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseWeeklyDropPerVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyDelegationBoost",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyDelegationBoostPercent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canDelegate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canDelegatePercent",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimBoostReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleBoostReward",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegationBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToReserve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFeesPercent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extraPaidPast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBoostReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchasedBoost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPurchasedBoosts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minDelegationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPercRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWeeklyDropPerVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextBoostId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextUpdatePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offersIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodDropPerVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodEndPurchasedDecrease",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodPurchasedAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodPurchasedDecreaseChanges",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodRewardIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedBoosts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "quit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingRewardPastPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdvisedPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseWeeklyDropPerVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationBoost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReserveRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDelegationTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPercRequired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWeeklyDropPerVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetPurchaseAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startRewardDistribution",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "targetPurchaseAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unblockClaim",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOfferPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userPurchasedBoosts",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromReserve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_PCT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_UINT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UNIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "advisedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWeeklyDropPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyDelegationBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyDelegationBoostPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canDelegatePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBoostReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleBoostReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earnedFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFeesPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraPaidPast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBoostReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPurchasedBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPurchasedBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDelegationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPercRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWeeklyDropPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBoostId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextUpdatePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodDropPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodEndPurchasedDecrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodPurchasedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodPurchasedDecreaseChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodRewardIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingRewardPastPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdvisedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseWeeklyDropPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDelegationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPercRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWeeklyDropPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetPurchaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetPurchaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblockClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOfferPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPurchasedBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromReserve",
    data: BytesLike
  ): Result;

  events: {
    "BoostPurchase(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Claim(address,uint256)": EventFragment;
    "ClaimReward(uint256,address,uint256)": EventFragment;
    "NewAdvisedPrice(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Quit(address)": EventFragment;
    "Registred(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateOffer(address,uint256)": EventFragment;
    "UpdateOfferPrice(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoostPurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdvisedPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Quit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOfferPrice"): EventFragment;
}

export interface BoostPurchaseEventObject {
  delegator: string;
  receiver: string;
  tokenId: BigNumber;
  amount: BigNumber;
  price: BigNumber;
  paidFeeAmount: BigNumber;
  expiryTime: BigNumber;
}
export type BoostPurchaseEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  BoostPurchaseEventObject
>;

export type BoostPurchaseEventFilter = TypedEventFilter<BoostPurchaseEvent>;

export interface ClaimEventObject {
  user: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ClaimRewardEventObject {
  boostId: BigNumber;
  user: string;
  amount: BigNumber;
}
export type ClaimRewardEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ClaimRewardEventObject
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface NewAdvisedPriceEventObject {
  newPrice: BigNumber;
}
export type NewAdvisedPriceEvent = TypedEvent<
  [BigNumber],
  NewAdvisedPriceEventObject
>;

export type NewAdvisedPriceEventFilter = TypedEventFilter<NewAdvisedPriceEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface QuitEventObject {
  user: string;
}
export type QuitEvent = TypedEvent<[string], QuitEventObject>;

export type QuitEventFilter = TypedEventFilter<QuitEvent>;

export interface RegistredEventObject {
  user: string;
  price: BigNumber;
}
export type RegistredEvent = TypedEvent<
  [string, BigNumber],
  RegistredEventObject
>;

export type RegistredEventFilter = TypedEventFilter<RegistredEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdateOfferEventObject {
  user: string;
  newPrice: BigNumber;
}
export type UpdateOfferEvent = TypedEvent<
  [string, BigNumber],
  UpdateOfferEventObject
>;

export type UpdateOfferEventFilter = TypedEventFilter<UpdateOfferEvent>;

export interface UpdateOfferPriceEventObject {
  user: string;
  newPrice: BigNumber;
}
export type UpdateOfferPriceEvent = TypedEvent<
  [string, BigNumber],
  UpdateOfferPriceEventObject
>;

export type UpdateOfferPriceEventFilter =
  TypedEventFilter<UpdateOfferPriceEvent>;

export interface Warden extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WardenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PCT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_UINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    advisedPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvedManagers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    baseWeeklyDropPerVote(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyDelegationBoost(
      delegator: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxFeeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyDelegationBoostPercent(
      delegator: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxFeeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canDelegate(
      delegator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canDelegatePercent(
      delegator: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimBoostReward(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMultipleBoostReward(
      boostIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimable(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegationBoost(overrides?: CallOverrides): Promise<[string]>;

    depositToReserve(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    earnedFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateFees(
      delegator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateFeesPercent(
      delegator: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    extraPaidPast(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeReserveRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    getBoostReward(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOffer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, number] & {
        user: string;
        pricePerVote: BigNumber;
        maxDuration: BigNumber;
        expiryTime: BigNumber;
        minPerc: number;
        maxPerc: number;
      }
    >;

    getPurchasedBoost(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Warden.PurchasedBoostStructOutput]>;

    getUserPurchasedBoosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    minDelegationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPercRequired(overrides?: CallOverrides): Promise<[BigNumber]>;

    minWeeklyDropPerVote(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextBoostId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextUpdatePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, number, boolean] & {
        user: string;
        pricePerVote: BigNumber;
        maxDuration: BigNumber;
        expiryTime: BigNumber;
        minPerc: number;
        maxPerc: number;
        useAdvicePrice: boolean;
      }
    >;

    offersIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    periodDropPerVote(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodEndPurchasedDecrease(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodPurchasedAmount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodPurchasedDecreaseChanges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodRewardIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchasedBoosts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
        amount: BigNumber;
        startIndex: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        buyer: string;
        claimed: boolean;
      }
    >;

    quit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    register(
      pricePerVote: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      expiryTime: PromiseOrValue<BigNumberish>,
      minPerc: PromiseOrValue<BigNumberish>,
      maxPerc: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remainingRewardPastPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveManager(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setAdvisedPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseWeeklyDropPerVote(
      newBaseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegationBoost(
      newDelegationBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeReserveRatio(
      newFeeReserveRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinDelegationTime(
      newMinDelegationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinPercRequired(
      newMinPercRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinWeeklyDropPerVote(
      newMinWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReserveManager(
      newReserveManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetPurchaseAmount(
      newTargetPurchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startRewardDistribution(
      _rewardToken: PromiseOrValue<string>,
      _baseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      _minWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      _targetPurchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetPurchaseAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unblockClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOffer(
      pricePerVote: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      expiryTime: PromiseOrValue<BigNumberish>,
      minPerc: PromiseOrValue<BigNumberish>,
      maxPerc: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOfferPrice(
      pricePerVote: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userPurchasedBoosts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromReserve(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  advisedPrice(overrides?: CallOverrides): Promise<BigNumber>;

  approveManager(
    newManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvedManagers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  baseWeeklyDropPerVote(overrides?: CallOverrides): Promise<BigNumber>;

  blockClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyDelegationBoost(
    delegator: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    maxFeeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyDelegationBoostPercent(
    delegator: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    percent: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    maxFeeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canDelegate(
    delegator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canDelegatePercent(
    delegator: PromiseOrValue<string>,
    percent: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimBoostReward(
    boostId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMultipleBoostReward(
    boostIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimable(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  delegationBoost(overrides?: CallOverrides): Promise<string>;

  depositToReserve(
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  earnedFees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateFees(
    delegator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateFeesPercent(
    delegator: PromiseOrValue<string>,
    percent: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  extraPaidPast(overrides?: CallOverrides): Promise<BigNumber>;

  feeReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  getBoostReward(
    boostId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOffer(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number, number] & {
      user: string;
      pricePerVote: BigNumber;
      maxDuration: BigNumber;
      expiryTime: BigNumber;
      minPerc: number;
      maxPerc: number;
    }
  >;

  getPurchasedBoost(
    boostId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Warden.PurchasedBoostStructOutput>;

  getUserPurchasedBoosts(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  minDelegationTime(overrides?: CallOverrides): Promise<BigNumber>;

  minPercRequired(overrides?: CallOverrides): Promise<BigNumber>;

  minWeeklyDropPerVote(overrides?: CallOverrides): Promise<BigNumber>;

  nextBoostId(overrides?: CallOverrides): Promise<BigNumber>;

  nextUpdatePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  offers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number, number, boolean] & {
      user: string;
      pricePerVote: BigNumber;
      maxDuration: BigNumber;
      expiryTime: BigNumber;
      minPerc: number;
      maxPerc: number;
      useAdvicePrice: boolean;
    }
  >;

  offersIndex(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  periodDropPerVote(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodEndPurchasedDecrease(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodPurchasedAmount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodPurchasedDecreaseChanges(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodRewardIndex(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchasedBoosts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      amount: BigNumber;
      startIndex: BigNumber;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      buyer: string;
      claimed: boolean;
    }
  >;

  quit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  register(
    pricePerVote: PromiseOrValue<BigNumberish>,
    maxDuration: PromiseOrValue<BigNumberish>,
    expiryTime: PromiseOrValue<BigNumberish>,
    minPerc: PromiseOrValue<BigNumberish>,
    maxPerc: PromiseOrValue<BigNumberish>,
    useAdvicePrice: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remainingRewardPastPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  removeManager(
    manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveAmount(overrides?: CallOverrides): Promise<BigNumber>;

  reserveManager(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setAdvisedPrice(
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseWeeklyDropPerVote(
    newBaseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegationBoost(
    newDelegationBoost: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeReserveRatio(
    newFeeReserveRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinDelegationTime(
    newMinDelegationTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinPercRequired(
    newMinPercRequired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinWeeklyDropPerVote(
    newMinWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReserveManager(
    newReserveManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetPurchaseAmount(
    newTargetPurchaseAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startRewardDistribution(
    _rewardToken: PromiseOrValue<string>,
    _baseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
    _minWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
    _targetPurchaseAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetPurchaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unblockClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOffer(
    pricePerVote: PromiseOrValue<BigNumberish>,
    maxDuration: PromiseOrValue<BigNumberish>,
    expiryTime: PromiseOrValue<BigNumberish>,
    minPerc: PromiseOrValue<BigNumberish>,
    maxPerc: PromiseOrValue<BigNumberish>,
    useAdvicePrice: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOfferPrice(
    pricePerVote: PromiseOrValue<BigNumberish>,
    useAdvicePrice: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userPurchasedBoosts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  withdrawERC20(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromReserve(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    advisedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    approveManager(
      newManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedManagers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    baseWeeklyDropPerVote(overrides?: CallOverrides): Promise<BigNumber>;

    blockClaim(overrides?: CallOverrides): Promise<void>;

    buyDelegationBoost(
      delegator: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxFeeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyDelegationBoostPercent(
      delegator: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxFeeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canDelegate(
      delegator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canDelegatePercent(
      delegator: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claim(overrides?: CallOverrides): Promise<boolean>;

    claimBoostReward(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimMultipleBoostReward(
      boostIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimable(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delegationBoost(overrides?: CallOverrides): Promise<string>;

    depositToReserve(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    earnedFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateFees(
      delegator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateFeesPercent(
      delegator: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraPaidPast(overrides?: CallOverrides): Promise<BigNumber>;

    feeReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    getBoostReward(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, number] & {
        user: string;
        pricePerVote: BigNumber;
        maxDuration: BigNumber;
        expiryTime: BigNumber;
        minPerc: number;
        maxPerc: number;
      }
    >;

    getPurchasedBoost(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Warden.PurchasedBoostStructOutput>;

    getUserPurchasedBoosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    minDelegationTime(overrides?: CallOverrides): Promise<BigNumber>;

    minPercRequired(overrides?: CallOverrides): Promise<BigNumber>;

    minWeeklyDropPerVote(overrides?: CallOverrides): Promise<BigNumber>;

    nextBoostId(overrides?: CallOverrides): Promise<BigNumber>;

    nextUpdatePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, number, boolean] & {
        user: string;
        pricePerVote: BigNumber;
        maxDuration: BigNumber;
        expiryTime: BigNumber;
        minPerc: number;
        maxPerc: number;
        useAdvicePrice: boolean;
      }
    >;

    offersIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    periodDropPerVote(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodEndPurchasedDecrease(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodPurchasedAmount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodPurchasedDecreaseChanges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodRewardIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchasedBoosts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
        amount: BigNumber;
        startIndex: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        buyer: string;
        claimed: boolean;
      }
    >;

    quit(overrides?: CallOverrides): Promise<boolean>;

    register(
      pricePerVote: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      expiryTime: PromiseOrValue<BigNumberish>,
      minPerc: PromiseOrValue<BigNumberish>,
      maxPerc: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    remainingRewardPastPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(
      manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    reserveManager(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setAdvisedPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseWeeklyDropPerVote(
      newBaseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationBoost(
      newDelegationBoost: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReserveRatio(
      newFeeReserveRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDelegationTime(
      newMinDelegationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPercRequired(
      newMinPercRequired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinWeeklyDropPerVote(
      newMinWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveManager(
      newReserveManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetPurchaseAmount(
      newTargetPurchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startRewardDistribution(
      _rewardToken: PromiseOrValue<string>,
      _baseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      _minWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      _targetPurchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    targetPurchaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unblockClaim(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateOffer(
      pricePerVote: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      expiryTime: PromiseOrValue<BigNumberish>,
      minPerc: PromiseOrValue<BigNumberish>,
      maxPerc: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateOfferPrice(
      pricePerVote: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateRewardState(overrides?: CallOverrides): Promise<boolean>;

    userIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPurchasedBoosts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFromReserve(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BoostPurchase(address,address,uint256,uint256,uint256,uint256,uint256)"(
      delegator?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
      price?: null,
      paidFeeAmount?: null,
      expiryTime?: null
    ): BoostPurchaseEventFilter;
    BoostPurchase(
      delegator?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
      price?: null,
      paidFeeAmount?: null,
      expiryTime?: null
    ): BoostPurchaseEventFilter;

    "Claim(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;

    "ClaimReward(uint256,address,uint256)"(
      boostId?: null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimRewardEventFilter;
    ClaimReward(
      boostId?: null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimRewardEventFilter;

    "NewAdvisedPrice(uint256)"(newPrice?: null): NewAdvisedPriceEventFilter;
    NewAdvisedPrice(newPrice?: null): NewAdvisedPriceEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Quit(address)"(user?: PromiseOrValue<string> | null): QuitEventFilter;
    Quit(user?: PromiseOrValue<string> | null): QuitEventFilter;

    "Registred(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      price?: null
    ): RegistredEventFilter;
    Registred(
      user?: PromiseOrValue<string> | null,
      price?: null
    ): RegistredEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UpdateOffer(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      newPrice?: null
    ): UpdateOfferEventFilter;
    UpdateOffer(
      user?: PromiseOrValue<string> | null,
      newPrice?: null
    ): UpdateOfferEventFilter;

    "UpdateOfferPrice(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      newPrice?: null
    ): UpdateOfferPriceEventFilter;
    UpdateOfferPrice(
      user?: PromiseOrValue<string> | null,
      newPrice?: null
    ): UpdateOfferPriceEventFilter;
  };

  estimateGas: {
    MAX_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    advisedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    approveManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvedManagers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseWeeklyDropPerVote(overrides?: CallOverrides): Promise<BigNumber>;

    blockClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyDelegationBoost(
      delegator: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxFeeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyDelegationBoostPercent(
      delegator: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxFeeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canDelegate(
      delegator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canDelegatePercent(
      delegator: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimBoostReward(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMultipleBoostReward(
      boostIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimable(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delegationBoost(overrides?: CallOverrides): Promise<BigNumber>;

    depositToReserve(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    earnedFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateFees(
      delegator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateFeesPercent(
      delegator: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraPaidPast(overrides?: CallOverrides): Promise<BigNumber>;

    feeReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    getBoostReward(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchasedBoost(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPurchasedBoosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDelegationTime(overrides?: CallOverrides): Promise<BigNumber>;

    minPercRequired(overrides?: CallOverrides): Promise<BigNumber>;

    minWeeklyDropPerVote(overrides?: CallOverrides): Promise<BigNumber>;

    nextBoostId(overrides?: CallOverrides): Promise<BigNumber>;

    nextUpdatePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offersIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    periodDropPerVote(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodEndPurchasedDecrease(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodPurchasedAmount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodPurchasedDecreaseChanges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodRewardIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchasedBoosts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    register(
      pricePerVote: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      expiryTime: PromiseOrValue<BigNumberish>,
      minPerc: PromiseOrValue<BigNumberish>,
      maxPerc: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remainingRewardPastPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    reserveManager(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAdvisedPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseWeeklyDropPerVote(
      newBaseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegationBoost(
      newDelegationBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeReserveRatio(
      newFeeReserveRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinDelegationTime(
      newMinDelegationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinPercRequired(
      newMinPercRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinWeeklyDropPerVote(
      newMinWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReserveManager(
      newReserveManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetPurchaseAmount(
      newTargetPurchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startRewardDistribution(
      _rewardToken: PromiseOrValue<string>,
      _baseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      _minWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      _targetPurchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetPurchaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unblockClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOffer(
      pricePerVote: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      expiryTime: PromiseOrValue<BigNumberish>,
      minPerc: PromiseOrValue<BigNumberish>,
      maxPerc: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOfferPrice(
      pricePerVote: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPurchasedBoosts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromReserve(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PCT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_UINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    advisedPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvedManagers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseWeeklyDropPerVote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyDelegationBoost(
      delegator: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxFeeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyDelegationBoostPercent(
      delegator: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxFeeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canDelegate(
      delegator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canDelegatePercent(
      delegator: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimBoostReward(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMultipleBoostReward(
      boostIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegationBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositToReserve(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    earnedFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateFees(
      delegator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateFeesPercent(
      delegator: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraPaidPast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBoostReward(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchasedBoost(
      boostId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPurchasedBoosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDelegationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPercRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minWeeklyDropPerVote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextBoostId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextUpdatePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offersIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodDropPerVote(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodEndPurchasedDecrease(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodPurchasedAmount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodPurchasedDecreaseChanges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodRewardIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchasedBoosts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    register(
      pricePerVote: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      expiryTime: PromiseOrValue<BigNumberish>,
      minPerc: PromiseOrValue<BigNumberish>,
      maxPerc: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remainingRewardPastPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdvisedPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseWeeklyDropPerVote(
      newBaseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegationBoost(
      newDelegationBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReserveRatio(
      newFeeReserveRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinDelegationTime(
      newMinDelegationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinPercRequired(
      newMinPercRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinWeeklyDropPerVote(
      newMinWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReserveManager(
      newReserveManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetPurchaseAmount(
      newTargetPurchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startRewardDistribution(
      _rewardToken: PromiseOrValue<string>,
      _baseWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      _minWeeklyDropPerVote: PromiseOrValue<BigNumberish>,
      _targetPurchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetPurchaseAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unblockClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOffer(
      pricePerVote: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      expiryTime: PromiseOrValue<BigNumberish>,
      minPerc: PromiseOrValue<BigNumberish>,
      maxPerc: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOfferPrice(
      pricePerVote: PromiseOrValue<BigNumberish>,
      useAdvicePrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPurchasedBoosts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromReserve(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
